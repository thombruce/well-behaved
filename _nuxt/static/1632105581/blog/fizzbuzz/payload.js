__NUXT_JSONP__("/blog/fizzbuzz", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC){return {data:[{slug:K,article:{slug:K,title:V,date:W,toc:[],body:{type:r,children:[{type:b,tag:f,props:{},children:[{type:b,tag:L,props:{to:M},children:[{type:a,value:X}]},{type:a,value:Y}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:Z}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:_}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:$}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:aa},{type:b,tag:h,props:{},children:[{type:a,value:N}]},{type:a,value:ab}]},{type:a,value:e},{type:b,tag:n,props:{className:[o]},children:[{type:b,tag:p,props:{className:[ac,q]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:O}]},{type:a,value:F}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ad}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:b,tag:c,props:{className:[d,g,u]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:G}]},{type:a,value:ae},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]},{type:a,value:aj},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]},{type:a,value:ak},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:G}]}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:b,tag:c,props:{className:[d,g,u]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]},{type:a,value:am},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:an}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:b,tag:c,props:{className:[d,g,u]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]},{type:a,value:ao},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:w}]}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:P}]},{type:a,value:F}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:w}]}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:ap}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:b,tag:i,props:{},children:[{type:a,value:aq},{type:b,tag:h,props:{},children:[{type:a,value:ar}]},{type:a,value:as},{type:b,tag:h,props:{},children:[{type:a,value:at}]},{type:a,value:au}]}]}]},dir:x,path:Q,extension:y,createdAt:l,updatedAt:l},_img:{}}],fetch:{"data-v-5ed6e13f:0":{collections:{"/blog":[{slug:K,title:V,date:W,toc:[],body:{type:r,children:[{type:b,tag:f,props:{},children:[{type:b,tag:L,props:{to:M},children:[{type:a,value:X}]},{type:a,value:Y}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:Z}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:_}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:$}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:aa},{type:b,tag:h,props:{},children:[{type:a,value:N}]},{type:a,value:ab}]},{type:a,value:e},{type:b,tag:n,props:{className:[o]},children:[{type:b,tag:p,props:{className:[ac,q]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:O}]},{type:a,value:F}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ad}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:b,tag:c,props:{className:[d,g,u]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:G}]},{type:a,value:ae},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]},{type:a,value:aj},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]},{type:a,value:ak},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:G}]}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:b,tag:c,props:{className:[d,g,u]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]},{type:a,value:am},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:an}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:b,tag:c,props:{className:[d,g,u]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]},{type:a,value:ao},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:j}]}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:w}]}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:P}]},{type:a,value:F}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:w}]}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:ap}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:b,tag:i,props:{},children:[{type:a,value:aq},{type:b,tag:h,props:{},children:[{type:a,value:ar}]},{type:a,value:as},{type:b,tag:h,props:{},children:[{type:a,value:at}]},{type:a,value:au}]}]}]},dir:x,path:Q,extension:y,createdAt:l,updatedAt:l},{slug:"fizzbuzz-and-personal-utilities",title:"FizzBuzz and Personal Utilities",date:null,toc:[],body:{type:r,children:[{type:b,tag:f,props:{},children:[{type:b,tag:L,props:{to:Q},children:[{type:a,value:"Yesterday"}]},{type:a,value:" I wrote up a little Vue component that basically does FizzBuzz for any given range of numbers and allows for the ruleset to be extended or changed by passing in a set of terms. And that's... great. It's a messy inclusion on this site, but that is what this site is meant for; rough work, rough journaling - it isn't supposed to make sense... or even be grammatically comfortable \u003C- "},{type:b,tag:i,props:{},children:[{type:a,value:"The grammar on that sentence? Yikes!"}]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"That said, I did get to thinking... "},{type:b,tag:i,props:{},children:[{type:a,value:"okay, well that's fine for Vue but I could generalise the actual FizzBuzz logic further in pure JavaScript and create components for any library from that."}]},{type:a,value:" Essentially I got to thinking I "},{type:b,tag:i,props:{},children:[{type:a,value:"could"}]},{type:a,value:" make a library specifically dedicated to FizzBuzz. What would be the point?"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"Well, FizzBuzz isn't actually all that useful an application. Sure, the same logic proves competency and can be applied to other problems, but FizzBuzz is itself a pretty niche application. The "},{type:b,tag:i,props:{},children:[{type:a,value:"point"}]},{type:a,value:" is to demonstrate process and competency. "},{type:b,tag:i,props:{},children:[{type:a,value:"So then"}]},{type:a,value:", I thought, "},{type:b,tag:i,props:{},children:[{type:a,value:"if I do a FizzBuzz library, it should also demonstrate the process and explain to others how one may go about answering the question."}]},{type:a,value:" Easy; I could add that to a readme. And yet..."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"I'd still be dedicating a whole repo to developing a little library for FizzBuzz? Can I do better than that?"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"Enter monorepos, which I've already talked about "},{type:b,tag:z,props:{href:"https:\u002F\u002Fcode.thombruce.com\u002F",rel:[A,B,C],target:D},children:[{type:a,value:"in another place"}]},{type:a,value:". I already intended to achieve this as a monorepo, having a separate directory for the JS vs Vue code. But I could go further, and house those packages together with a bunch of utilities I'd like to throw together for... generating random numbers, passwords, other sort of... general utilities. Not all of them useful, but all of them together and accessible from a single... website full of them. So Thom's Utilities, then? Yeah, pretty much."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"So I would have a "},{type:b,tag:i,props:{},children:[{type:a,value:"Utilities"}]},{type:a,value:" project with a "},{type:b,tag:i,props:{},children:[{type:a,value:"docs"}]},{type:a,value:" site and nested hierarchy of "},{type:b,tag:i,props:{},children:[{type:a,value:"packages"}]},{type:a,value:" managed by Yarn Workspaces and Lerna. Easy enough. Assuming both of those support the hierarchical structure I'm thinking of then we'd wind up with a directory structure a bit like..."}]},{type:a,value:e},{type:b,tag:n,props:{className:[o]},children:[{type:b,tag:p,props:{className:[av,q]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"📂 util\n├── 📁 docs\n├── 📂 packages\n|   └── 📂 fizzbuzz\n|       ├── 📂 packages\n|       |   ├── 📁 js\n|       |   └── 📁 vue\n|       ├── package.json\n|       └── README.md\n├── package.json\n└── README.md\n"}]}]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"In the above illustration, the root project called 'util' is a workspace with numerous packages; most would live under the 'packages' directory with the exception of 'docs'. However, 'fizzbuzz' is "},{type:b,tag:R,props:{},children:[{type:a,value:"also"}]},{type:a,value:" a workspace with numerous packages, those being simply called 'js' and 'vue' depending on target framework."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"That's what I'm thinking, right... It gives me a collective space to work on certain utility projects that are "},{type:b,tag:i,props:{},children:[{type:a,value:"good code"}]},{type:a,value:" but don't necessarily justify having their own repositories. And we can change our mind later; it's trivial to move packages out of such a monorepo. If and when that becomes necessary, then it's easily done. But the benefit of doing it this way is that the 'docs' site always serves as something that can use and test the latest code."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"I mean I just don't see the benefit of a whole separate project just for FizzBuzz, and yet it is something that I think will be worthwhile to demonstrate on a website showing off utilities I've created, little applets."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"Yeah, okay. I've convinced myself. That's what I'm gonna do!"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"Or is it? Let's quickly second-guess that. I have in my mind that I'll convert the FizzBuzz Vue component I wrote yesterday into a more general JS module, as well as a Vue component, but actually... the Vue component is redundant. The JS module will essentially do everything I want apart from styling, but styling and markup are application-specific... "},{type:b,tag:i,props:{},children:[{type:a,value:"I think"}]},{type:a,value:". I mean, certainly I prefer the sort of library that simply offers an API for constructing styled components rather than one which simply provides them. The component parts I will be creating are... the output, range selectors for our "},{type:b,tag:h,props:{},children:[{type:a,value:"from"}]},{type:a,value:aw},{type:b,tag:h,props:{},children:[{type:a,value:"to"}]},{type:a,value:" values, and an extendible, shrinkable and modifiable list of rules (our "},{type:b,tag:h,props:{},children:[{type:a,value:N}]},{type:a,value:"). Those component-parts actually share more in common with other UI components I may like to build than they do with the core code in this case. In other words... they're a very different scope. I should let the application, and maybe a UI library handle those UI parts."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"This means that the FizzBuzz library I will be putting together should work with just one very small file. That... shouldn't be surprising, should it? Well, it isn't..."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"No, I'm just realising we over-thought this previously. The 'fizzbuzz' package won't need its own sub-packages, we don't need to worry about nested packages yet. All we need is this:"}]},{type:a,value:e},{type:b,tag:n,props:{className:[o]},children:[{type:b,tag:p,props:{className:[av,q]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"📂 util\n├── 📁 docs\n├── 📂 packages\n|   └── 📂 fizzbuzz\n|       ├── 📂 src\n|       |   └── index.js\n|       ├── package.json\n|       └── README.md\n├── package.json\n└── README.md\n"}]}]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"...admittedly doesn't look like much of a reduction, but consider that those 'js' and 'vue' folders were themselves full-fledged packages, whereas here... 'src' simply contains "},{type:b,tag:h,props:{},children:[{type:a,value:"index.js"}]},{type:a,value:"... it's a bigger reduction than it looks. And let's be honest, this is already more though than this particular little problem warrants. But we're learning, we're thinking in terms of... "},{type:b,tag:i,props:{},children:[{type:a,value:"\"is this UI part needed, or is it out of scope?\""}]},{type:a,value:" And that's a good thing."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"Y'know, on third-thought... I think I will separate the FizzBuzz utility out into its own repository. That way I could point to its development in the Git history, perhaps keep a simple CHANGELOG too; it could be an example of my development process... both for me and for others. Since it is such a simple utility, the history and structure of the project should be clear enough to get a sense of that process at a glance. Yeah, that's what I'll do..."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"The utilities site is practically ready to go; I'll just separate out the FizzBuzz utility and use it to illustrate a development process..."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"Yeah, I'm happy with that. I've done my best to separate commits on the FizzBuzz project out into meaningful, hopefully pretty readable steps here: "},{type:b,tag:z,props:{href:ax,rel:[A,B,C],target:D},children:[{type:a,value:ax}]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"And I've imported the utility over at "},{type:b,tag:z,props:{href:ay,rel:[A,B,C],target:D},children:[{type:a,value:ay}]},{type:a,value:" with some of my own UI elements applied there for playing with the library, and I think that works great. Done!"}]}]},dir:x,path:"\u002Fblog\u002Ffizzbuzz-and-personal-utilities",extension:y,createdAt:l,updatedAt:l},{slug:"hello-world",title:"Hello, World!",date:"2021-09-15T21:54:05.000Z",toc:[],body:{type:r,children:[{type:b,tag:f,props:{},children:[{type:a,value:"Hi there, hello world, and welcome... to "},{type:b,tag:i,props:{},children:[{type:a,value:H}]},{type:a,value:", my excuse to not be. "},{type:b,tag:i,props:{},children:[{type:a,value:H}]},{type:a,value:" is a deliberate misnomer, a contradiction at odds with my intentions, an oxymoron by proxy. See, there's such a thing as good writing, as well-behaved websites and code, and I've got a few projects on the go where I'm aiming for that sort of thing..."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:b,tag:i,props:{},children:[{type:a,value:"Actually, let's not bother listing them."}]},{type:a,value:" The key point is this: I agonise sometimes over where my writing fits, and where I should be writing some of the code that I want to be writing. I mean... in both fields, there are things which fit in certain scopes and I've tried to refine my works to fit into a certain subset of scopes... but what if some things don't fit? What if I just want to journal? What if I just want to mess around and... make a quick widget to show something off? What if those things don't necessitate whole additional scopes of their own? My answer..."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:b,tag:i,props:{},children:[{type:a,value:H}]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"An excuse to write poorly with no target length, no specific genres or topics. And an excuse to write code for the sake of writing code instead of... refining it and making it fit neatly into little packages. Things that start here might evolve into concepts developed elsewhere, and that's fine - that's the point! I just don't necessarily have the space for that right now, but this can be that space."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"And speaking of having no target length and not having to play by the rules..."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:b,tag:R,props:{},children:[{type:a,value:"END."}]}]}]},dir:x,path:"\u002Fblog\u002Fhello-world",extension:y,createdAt:l,updatedAt:l},{slug:"nuxt-pages-content-components",title:"Nuxt Pages, Content and Components",date:"2021-09-18T16:42:47.000Z",toc:[],body:{type:r,children:[{type:b,tag:f,props:{},children:[{type:a,value:"Let's show off a little, shall we? One reason I love Nuxt Content is the capability to embed Nuxt and Vue components in Markdown content documents, which are then rendered by some Nuxt page, typically a dynamic one. For instance... let's add my clock widget, shall we?"}]},{type:a,value:e},{type:b,tag:n,props:{className:[o]},children:[{type:b,tag:p,props:{className:[q,"language-text"]},children:[{type:b,tag:h,props:{},children:[{type:a,value:"yarn add @thombruce\u002Fvue-timepiece --dev\n"}]}]}]},{type:a,value:e},{type:b,tag:n,props:{className:[o]},children:[{type:b,tag:p,props:{className:[q,"language-js"]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,az,aA]},children:[{type:a,value:"export"}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,az,aA]},children:[{type:a,value:"default"}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"{"}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:J}]},{type:a,value:"\n  buildModules"},{type:b,tag:c,props:{className:[d,"operator"]},children:[{type:a,value:":"}]},{type:a,value:m},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"["}]},{type:a,value:T},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:J}]},{type:a,value:T},{type:b,tag:c,props:{className:[d,"string"]},children:[{type:a,value:"'@thombruce\u002Fvue-timepiece\u002Fnuxt'"}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aB}]},{type:a,value:T},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:J}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"]"}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aB}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,I]},children:[{type:a,value:J}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"}"}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"And then to embed it in a document, I just add..."}]},{type:a,value:e},{type:b,tag:n,props:{className:[o]},children:[{type:b,tag:p,props:{className:[q,"language-md"]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:O}]},{type:a,value:U}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:w}]}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:P}]},{type:a,value:U}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:w}]}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"...and it appears!"}]},{type:a,value:e},{type:b,tag:U,props:{},children:[{type:a,value:e}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"Fantastic."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"Okay, that's a really strong start. Components inside of content, rendered by the files in "},{type:b,tag:h,props:{},children:[{type:a,value:"\u002Fpages"}]},{type:a,value:". But actually... those page files are components too. "},{type:b,tag:i,props:{},children:[{type:a,value:"No, I'm not thinking about embedding them here."}]},{type:a,value:" What I'm thinking is..."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"At present, this document is rendered by a page component at "},{type:b,tag:h,props:{},children:[{type:a,value:"pages\u002F_collection\u002F_slug.vue"}]},{type:a,value:". The underscore in both "},{type:b,tag:h,props:{},children:[{type:a,value:"_collection"}]},{type:a,value:aw},{type:b,tag:h,props:{},children:[{type:a,value:"_slug"}]},{type:a,value:" communicates to Nuxt that these are dynamic pages, those values will differ and these should be used to render many different documents... like all the other blog pages. Buuuut... I could create a file at "},{type:b,tag:h,props:{},children:[{type:a,value:"pages\u002Fblog\u002Fnuxt-pages-content-components.vue"}]},{type:a,value:". That path would "},{type:b,tag:R,props:{},children:[{type:a,value:"exactly"}]},{type:a,value:" match this document, and take priority over the dynamic page. I could do some interesting things with that..."}]},{type:a,value:e},{type:b,tag:"ol",props:{},children:[{type:a,value:e},{type:b,tag:E,props:{},children:[{type:a,value:"The layout could be completely different for this page in particular"}]},{type:a,value:e},{type:b,tag:E,props:{},children:[{type:a,value:"It could have its own application logic and dynamic content"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"I mean, I could program all sorts to appear on the page. Essentially we have a nesting structure like so:"}]},{type:a,value:e},{type:b,tag:"ul",props:{},children:[{type:a,value:e},{type:b,tag:E,props:{},children:[{type:a,value:"Page - top level, dynamic, highly programmatic"}]},{type:a,value:e},{type:b,tag:E,props:{},children:[{type:a,value:"Content - static"}]},{type:a,value:e},{type:b,tag:E,props:{},children:[{type:a,value:"Component - dynamic, highly programmatic"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"Once I do decide on the content's position on the page, that's pretty much set... but apart from that, both individual components that it contains and the surrounding page component can add a tonne of other flashy things. And I don't expect this has much of a performance cost... Maybe a little. But for static sites, all of these pages are generated anyway, so the result is always... all of these files exist, in a sense. Definitely something to look at, maybe I'll benchmark the build with and without in future, but for just now..."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"Let's add something nifty "},{type:b,tag:i,props:{},children:[{type:a,value:"outside"}]},{type:a,value:" of this content document."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"What follows is not embedded in my Markdown doc, it is a custom page component built specifically to render this document and show you... uhmm... whatever appears below..."}]}]},dir:x,path:M,extension:y,createdAt:l,updatedAt:l},{slug:"well-behaved-deployment",title:"Well Behaved Deployment",date:"2021-09-16T11:46:11.000Z",toc:[],body:{type:r,children:[{type:b,tag:f,props:{},children:[{type:a,value:"Netlify or GitHub Pages for this one? What do we think?"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"I'm also having ideas about creating a shared monorepo for all of my blogs that would have a shared content folder... at least for blog posts, anyway. But then I don't know how, uhmmm, sensible that is."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"Anyway, Netlify vs GitHub Pages. I frequently forget the reasons I had for picking one over the other... Currently use GitHub Pages to host the "},{type:b,tag:z,props:{href:"https:\u002F\u002Fthombruce.github.io\u002Ftnt",rel:[A,B,C],target:D},children:[{type:a,value:"TNT docs"}]},{type:a,value:", and Netlify to serve all of my other sites. None of those use Netlify's advanced features though; I even moved the build process off Netlify and across to GitHub Actions. So I don't know if I need Netlify... well... I don't know if I need it "},{type:b,tag:i,props:{},children:[{type:a,value:"yet"}]},{type:a,value:" - it might have benefits in the future, like the serverless functions offered by Netlify that I'm not yet using."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"Actually, if I did move to a shared monorepo for all of my blogs that would lead to some issues, and it absolutely wouldn't work as a GitHub Pages site. Each GitHub repo gets precisely one GitHub pages site; it can be based on any branch or directory (I think) in the repo, but there can only be one. Netlify, on the other hand, could build multiple sites from the same repository, each site having its own "},{type:b,tag:h,props:{},children:[{type:a,value:"dist"}]},{type:a,value:" folder. But I think I'm not going to pursue the monorepo idea here... I already have a separate mechanism for having the sites share content; it's imperfect, but it works. In which case..."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"Why Netlify?"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"GitHub Pages and Netlify have comparable bandwidth limitations at 100GB per month each. GitHub Pages has additional limitations on site size, at 1GB recommended repository size and 1GB limit on deployed site size. The main limiting factor on Netlify is build time - it stacks up quickly. On GitHub, build time is limited to 10 builds per hour but there's no limit on time used per month for free, open-source projects. This is actually why I no longer use Netlify's build processes, despite still using their service to deploy my sites."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"But why? Why do I still use them to deploy my sites? I... don't know. Yet... despite not knowing, I still am tempted to deploy this "},{type:b,tag:i,props:{},children:[{type:a,value:H}]},{type:a,value:" website there. The interface is cleaner, more convenient for listing and navigating to individual sites, compared with GitHub where sites are mixed in with all of my other repositories..."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"I have a longterm answer to that problem, which is to create my own site management interface that communicates with both of their APIs among others, and provides a single UI for cross-service site and deployment management. But I'm not there yet..."}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"Yeah, okay, for now I just like the interface of Netlify a lot and appreciate how convenient it makes listing and managing my sites. We'll deploy on Netlify. It only takes a second... and done! Well Behaved can be found at "},{type:b,tag:z,props:{href:aC,rel:[A,B,C],target:D},children:[{type:a,value:aC}]},{type:a,value:". Haven't bothered to give it a custom domain yet, perhaps I won't. DNS propagation takes a little while longer, and I don't really place that much importance on this website... It is, after all, just a place to misbehave."}]}]},dir:x,path:"\u002Fblog\u002Fwell-behaved-deployment",extension:y,createdAt:l,updatedAt:l}]}}},mutations:void 0}}("text","element","span","token","\n","p","punctuation","code","em","'","tag","2021-09-20T02:37:24.803Z"," ","div","nuxt-content-highlight","pre","line-numbers","root","attr-name","attr-value","attr-equals","=","\u003E","\u002Fblog",".md","a","nofollow","noopener","noreferrer","_blank","li","fizz-buzz","\"","Well Behaved","comment","\u002F\u002F ...","fizzbuzz","nuxt-link","\u002Fblog\u002Fnuxt-pages-content-components","terms","\u003C","\u003C\u002F","\u002Fblog\u002Ffizzbuzz","strong","\n  ","\n    ","timepiece-analog","FizzBuzz","2021-09-18T17:27:32.000Z","Now that I know"," that I can mix up my blog posts by giving them their own page components, and since I'm not yet decided where to place my coding experiments here, I want to use this pattern to get something off my mind... which is FizzBuzz.","FizzBuzz is a standard coding challenge in interviews. The rules are simple: List a sequence of integers; for each integer that is a multiple of 3, output 'Fizz' instead; for each that is a multiple of 5, output 'Buzz' instead; and for each that is a multiple of both 3 and 5 (multiples of 15), output 'FizzBuzz' instead. Generally the challenge is designed to see how programmers code, whether they leave themselves room for adaptation and alteration, or if they just rush through the problem with the given rules...","And I just want to write a simple FizzBuzz thing because I always forget what FizzBuzz is when it comes to interviews. So... let's create a page component and the rest of this page will just be that and output FizzBuzz up to... let's say, 1000. But let's make it possible to change and configure that value, perhaps some other values too.","But that's all. This is just 1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, FizzBuzz, 16, 17, Fizz, from here on out...","Actually, I'll do you one better. I've generalised the code so that it can go up to any number of my choice and accepts a "," parameter with integer-word combos with which it will construct phrases. Let's say we want the general FizzBuzz problem for positive integers up to 1000, plus for multiples of 13 we should also add 'Foo'. I just include my new component like so...","language-html",":terms","{ 3: ","Fizz",", 5: ","Buzz",", 13: ","Foo"," }",":from","-15",":to","1000","And the code is generalised enough to handle that. If you want to look for the first instance of 'FizzBuzzFoo', it happens at 195, the first common multiple of 3, 5 and 13.","EDIT: Actually, I've just also made the lower bound a variable; you can see above I call it as ",":from='-15'",". So now the first instance of 'FizzBuzzFoo' is 0, because ","0 modulo N"," for any value of N is 0, and I'm starting from a negative value.","language-txt"," and ","https:\u002F\u002Fgithub.com\u002Fthombruce\u002Ffizzbuzz\u002Fcommits\u002Fmain","https:\u002F\u002Futil.thombruce.com\u002Ffizzbuzz","keyword","module",",","https:\u002F\u002Fwell-behaved.netlify.app\u002F")));